<?php

use Drupal\user\Entity\User;
use Drupal\file\Entity\File;
use PHPOnCouch\CouchClient;
use Predis\Client;
use Drupal\node\Entity\Node;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;

function isByteClubPage(){

  //badgelist page
  $path = \Drupal::request()->getRequestUri();
  if (strpos($path, '/summergame/badgelist/byteclub') !== FALSE) {
    return true;
  }

  //taxonomy page and all other byteclub pages
  if (strpos($path, '/byteclub') !== FALSE) {
    return true;
  }

  //badge pages
  $node = \Drupal::request()->attributes->get('node');
  if ($node) {
    if (method_exists($node, 'getType')) {
      if ($node->getType() == "sg_badge") {
        if ($node->field_badge_game_term->value == "ByteClub") {
          return true;
        }
      }
    }
  }


  return false;

}

function summergame_preprocess_html(&$variables) {
  if(isByteClubPage()){

    $variables['attributes']['class'][] = 'byte-club-skin';


    $module_path = \Drupal::service('module_handler')->getModule('summergame')->getpath();
    $renderArray = [
      '#type'     => 'inline_template',
      '#template' => \file_get_contents($module_path."/templates/byteclub-header.html.twig"),
      '#context'  => [
        'sg_active_player'=>summergame_get_active_player()
      ],
    ];

    $bc_header = (string) \Drupal::service('renderer')->renderPlain($renderArray);


    if (isset($variables['page']['content']['aadl_content']['#prefix'])) {
      $bc_header = $bc_header . $variables['page']['content']['aadl_content']['#prefix'];
    }

    $variables['page']['content']['aadl_content']['#prefix'] = $bc_header;

  }

}

function summergame_node_view_alter(array &$build) {
  // @see \Drupal\Tests\embed\Functional\EmbedPreviewTest::testPreview
  if (isByteClubPage()) {
    $build['#attached']['library'][] = 'summergame/summergame-byteclub-lib';
  }
}







function summergame_leaderboard_update() {
  $summergame_settings = \Drupal::config('summergame.settings');
  $staff_rid = $summergame_settings->get('summergame_staff_role_id');
  $redis = new Client(\Drupal::config('summergame.settings')->get('summergame_redis_conn'));

  $terms = summergame_get_game_terms();
  $terms[] = 'career'; // add string for career points over all games
  $ranges = ['day', 'week', 'alltime'];
  $staffs = [1, 0];

  $rows = (int) $_GET['rows'] ? (int) $_GET['rows'] : 10000;

  foreach ($staffs as $staff) {
    foreach ($ranges as $range) {
      foreach ($terms as $type) {
        if (PHP_SAPI === 'cli') {
          echo "Generating $staff:$range:$type\n";
        }

        $args = [];

        // Switch for staff
        if ($staff_rid) {
          if ($staff) {
            $staff_query = " AND {user__roles}.roles_target_id = '$staff_rid' ";
          }
          else {
            $staff_query = ' AND {user__roles}.roles_target_id IS NULL ';
          }
        }

        // Determine type
        if ($type != 'career') {
          $type_query = 'AND {sg_ledger}.game_term LIKE :game_term ';
          $args[':game_term'] = $type;
        }
        else {
          $type_query = '';
        }

        // Determine range
        if ($range == 'day') {
          $range_query = 'AND {sg_ledger}.timestamp > ' . (time() - (60 * 60 * 24)) . ' ';
        }
        else if ($range == 'week') {
          $range_query = 'AND {sg_ledger}.timestamp > ' . (time() - (60 * 60 * 24 * 7)) . ' ';
        }
        else {
          $range_query = '';
        }

        $leaderboard = [];

        $db = \Drupal::database();

        $res = $db->query('SELECT {sg_players}.pid, SUM(points) AS lb_total ' .
                          'FROM {sg_ledger}, {sg_players} ' .
                          "LEFT JOIN {user__roles} ON {sg_players}.uid = {user__roles}.entity_id AND {user__roles}.roles_target_id = '$staff_rid' " .
                          'WHERE {sg_players}.pid = {sg_ledger}.pid ' .
                          "AND {sg_ledger}.metadata NOT LIKE '%leaderboard:no%' " .
                          $type_query .
                          $range_query .
                          $staff_query .
                          'GROUP BY {sg_players}.pid ' .
                          'ORDER BY lb_total DESC ' .
                          'LIMIT ' . $rows, $args);

        while ($row = $res->fetchAssoc()) {
          $lb_player = summergame_player_load($row['pid']);

          if ($lb_player['show_leaderboard']) {
            $player_name = $lb_player['nickname'] ? $lb_player['nickname'] : $lb_player['name'];
          }
          else {
            $player_name = 'Player #' . $lb_player['pid'];
          }

          $leaderboard[] = [
            'pid' => $lb_player['pid'],
            'show_myscore' => $lb_player['show_myscore'],
            'player' => $player_name,
            'score' => $row['lb_total'],
          ];
        }

        $redis->set("summergame:leaderboard:$staff:$range:$type", json_encode($leaderboard));
      }
    }
  }
  $redis->set("summergame:leaderboard:timestamp", time());
}

function summergame_get_leaderboard($type = '', $range = 'day', $staff = 0) {
  $redis = new Client(\Drupal::config('summergame.settings')->get('summergame_redis_conn'));
  return [
    'timestamp' => $redis->get('summergame:leaderboard:timestamp'),
    'rows' => json_decode($redis->get("summergame:leaderboard:$staff:$range:$type"), TRUE),
  ];
}

/*
function summergame_load_homecodes() {
  $db = \Drupal::database();
  // Empty the table
  $db->query("TRUNCATE sg_map_points");

  // Populate the table with homecodes
  $homecodes = $db->query("SELECT clue, game_term FROM sg_game_codes WHERE clue LIKE '%homecode%'")->fetchAll();
  foreach ($homecodes as $homecode) {
    $code_data = json_decode($homecode->clue);
    if ($code_data->lat) {
      $map_point = [
        'type' => 'homecode',
        'lat' => $code_data->lat,
        'lon' => $code_data->lon,
        'game_term' => $homecode->game_term,
        'display' => ($code_data->display ? 1 : 0)
      ];
      $db->insert('sg_map_points')->fields($map_point)->execute();
    }
  }

  // Update the nearby counts after all points are loaded
  summergame_update_map_points();
}
*/
/*
function summergame_update_map_points() {
  $radius = 0.005;
  $db = \Drupal::database();
  $points = $db->query("SELECT * FROM sg_map_points ORDER BY id ASC")->fetchAll();
  foreach ($points as $point) {
    $lat_min = $point->lat - $radius;
    $lat_max = $point->lat + $radius;
    $lon_min = $point->lon - $radius;
    $lon_max = $point->lon + $radius;
    $game_term = $point->game_term;

    $count = $db->query("SELECT COUNT(*) FROM sg_map_points WHERE game_term = '$game_term' AND lat BETWEEN $lat_min AND $lat_max AND lon BETWEEN $lon_min AND $lon_max")->fetchField();
    $db->update('sg_map_points')->fields(['nearby_count' => $count])->condition('id', $point->id)->execute();
  }
}
*/

function summergame_theme() {
  return [
    'summergame_admin_page' => [
      'variables' => [
        'print_page_url' => NULL,
        'summergame_player_search_form' => NULL,
        'summergame_gamecode_search_form' => NULL,
        'sg_admin' => NULL,
        'lawn_code_count' => NULL,
        'library_code_count' => NULL,
        'gc_rows' => NULL,
        'badge_rows' => NULL,
        'limit' => NULL,
      ],
    ],
    'summergame_admin_player_page' => [
      'variables' => [
        'summergame_player_search_form' => NULL,
        'rows' => NULL,
      ],
    ],
    'summergame_admin_gamecodes_page' => [
      'variables' => [
        'summergame_gamecode_search_form' => NULL,
        'rows' => NULL,
      ],
    ],
    'summergame_admin_players_merge_page' => [
      'variables' => [
        'pid1' => NULL,
        'pid2' => NULL,
        'rows' => NULL,
      ],
    ],
    'summergame_admin_ledger' => [
      'variables' => [
        'game_term_filter' => NULL,
        'ledger' => NULL,
        'pager' => NULL,
        'game_display_name' => NULL,
      ]
    ],
    'summergame_player_page' => [
      'variables' => [
        'summergame_points_enabled' => NULL,
        'playername' => NULL,
        'player' => NULL,
        'player_access' => NULL,
        'other_players' => NULL,
        'points' => NULL,
        'balances' => NULL,
        'pointsomatic_weekly_totals' => NULL,
        'progress' => NULL,
        'summergame_current_game_term' => NULL,
        'commerce_shop_term' => NULL,
        'summergame_shop_message_threshold' => NULL,
        'summergame_shop_message' => NULL,
        'commerce_game_term' => NULL,
        'completed_classic' => NULL,
        'website_user' => NULL,
        'homecode' => NULL,
        'game_display_name' => NULL,
      ],
    ],
    'summergame_player_ledger' => [
      'variables' => [
        'ledger' => NULL,
        'pager' => NULL,
        'game_display_name' => NULL,
      ]
    ],
    'summergame_player_redeem' => [
      'variables' => [
        'redeem_form' => NULL,
        'type' => NULL,
      ]
    ],
    'summergame_player_badge_list' => [
      'variables' => [
        'player' => NULL,
        'all_players' => NULL,
        'viewing_access' => NULL,
        'game_term' => NULL,
        'list_tags' => NULL,
        'badge_list' => NULL,
        'isByteClub' => NULL,
      ]
    ],
    'summergame_leaderboard_page' => [
      'variables' => [
        'total' => NULL,
        'player_count' => NULL,
        'game_terms' => NULL,
        'type' => NULL,
        'range' => NULL,
        'staff' => NULL,
        'sg_admin' => NULL,
        'leaderboard_timestamp' => NULL,
        'leaderboard' => NULL,
      ]
    ],
    'summergame_player_external_redeem' => [
      'variables' => [
        'players' => NULL,
        'uid' => NULL,
        'type' => NULL,
      ]
    ]
  ];
}

/**
 * HOOK: Add game tag to node on load
 */
function summergame_entity_storage_load(array $entities, $entity_type) {
  if ($entity_type == 'node') {
    $db = \Drupal::database();
    foreach ($entities as $entity) {
      // Search for node id in game code table
      $res = $db->query("SELECT * FROM sg_game_codes WHERE link = :link", [':link' => 'nid:'. $entity->id()]);
      while ($sg_game_code = $res->fetchObject()) {
        $game_term = $sg_game_code->game_term;
        $game_code = $sg_game_code->text;
        $entity->gamecodes[$game_term][] = $game_code;
      }
    }
  }
}

/**
 * HOOK: strip whitespace and copy formula for badge nodes on presave.
 */
function summergame_entity_presave(EntityInterface $node) {
  if ($node->bundle() == 'sg_badge') {
    // Trim leading and trailing whitespace on each line and concatonate into a single line formula
    $formula = '';
    $formula_lines = explode("\n", $node->get('field_badge_formula_long')->value);
    foreach ($formula_lines as $formula_line) {
      $formula .= trim($formula_line);
    }
    // Set field_badge_formula as cleaned up version
    $node->set('field_badge_formula', $formula);
  }
}

/**
 * FORM ALTER: alter the Badge edit form
 */
function summergame_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_sg_badge_form' || $form_id == 'node_sg_badge_edit_form') {
    // set the field_badge_formula field to disabled
    $form['field_badge_formula']['widget'][0]['value']['#attributes']['disabled'] = TRUE;
  }
}

/**
 * UTILITY: Get array of all Game Terms
 */
function summergame_get_game_terms() {
  $db = \Drupal::database();
  $res = $db->query('SELECT DISTINCT game_term FROM `sg_ledger` ORDER BY game_term ASC');
  foreach ($res as $row) {
    $terms[] = $row->game_term;
  }
  return $terms;
}

/**
 * UTILITY: Get defined home page paths for Game Term patterns
 */
function summergame_get_game_term_homes() {
  $game_term_homes = [];
  $homes_setting = \Drupal::config('summergame.settings')->get('summergame_game_term_homes');
  foreach (explode("\n", $homes_setting) as $homes_row) {
    list($pattern, $path) = explode(':', $homes_row);
    $game_term_homes[trim($pattern)] = trim($path);
  }
  return $game_term_homes;
}

/**
 * HOOK: Receive and respond to text messages
 */
function summergame_twilio_respond($incoming) {
  $db = \Drupal::database();
  $summergame_settings = \Drupal::config('summergame.settings');
  $current_game_term = \Drupal::config('summergame.settings')->get('summergame_current_game_term');

  // Prep generic response array
  $response_template = ['uid' => twilio_lookup_user($incoming['phone']),
                        'phone' => $incoming['phone'],
                        'incoming' => 0];
  $responses = [];

  // Try to load existing player
  $player = summergame_player_load(['phone' => $incoming['phone']]);
  unset($player['bids']);

  // Determine if text is a SummerGame text
  if (preg_match('/^[A-Za-z]([\d]{6})$/', $incoming['text'], $matches)) {
    // Cell phone merge
    if ($web_player = summergame_player_load(['phone' => $matches[1]])) {
      unset($web_player['bids']);
      // set the phone number on the web player and merge the two
      $web_player['phone'] = $incoming['phone'];
      summergame_player_save($web_player);

      $response = $response_template;
      $response['text'] .= 'Updated your player record with the phone # ' . $incoming['phone'];
      $responses[] = $response;

      if ($player['pid'] && !$player['uid']) {
        summergame_players_merge($web_player['pid'], $player['pid']);
        $response = $response_template;
        $response['text'] .= 'Merged this phone\'s player record with your website player';
        $responses[] = $response;
      }
    }
  }
  else if (strtolower($incoming['text']) == 'newplayer' ||
           strtolower($incoming['text']) == 'new player') {
    if (!$player['pid']) {
      $new_player_needed = TRUE;
    }
    else {
      $response = $response_template;
      $response['text'] .= 'Player #' . $player['pid'] . ' already attached to this phone. Enter game codes to play!';
      $responses[] = $response;
    }
  }
  else if (preg_match('/^S?[ART]G[\d]{5}$/', $incoming['text'])) {
    $game_card_text = TRUE;
    if (!$player['pid']) {
      $new_player_needed = TRUE;
    }
  }
  else if (stripos($incoming['text'], 'nick ') === 0 || stripos($incoming['text'], 'nickname ') === 0) {
    $nickname_update = TRUE;
    if (!$player['pid']) {
      $new_player_needed = TRUE;
    }
  }
  else if (strtolower($incoming['text']) == 'points') {
    if (!$player['pid']) {
      $new_player_needed = TRUE;
    }
    else {
      $response = $response_template;
      $gameDisplayName = \Drupal::config('summergame.settings')->get('game_display_name');
      $player_points = summergame_get_player_points($player['pid']);
      $total = (int) $player_points[$current_game_term]['total'];

      $response['text'] = ($player['nickname'] ? $player['nickname'] : $player['name']) . "'s $gameDisplayName Point Total: ";
      $response['text'] .= $total . ' points';

      $responses[] = $response;
    }
  }
  else if (strtolower($incoming['text']) == 'shopbalance' ||
           strtolower($incoming['text']) == 'shop balance') {
    if (!$player['pid']) {
      $new_player_needed = TRUE;
    }
    else {
      $response = $response_template;
      $response['text'] = ($player['nickname'] ? $player['nickname'] : $player['name']) . "'s Shop Balance: ";

      if (\Drupal::moduleHandler()->moduleExists('commerce_summergame')) {
        $summergame_shop_game_term = \Drupal::config('commerce_summergame.settings')->get('commerce_summergame_game_term');

        $balances = commerce_summergame_get_player_balances($player['pid']);
        $response['text'] .= $balances[$summergame_shop_game_term] . ' ' . $summergame_shop_game_term  . ' points';
      }
      else {
        $response['text'] .= 'Sorry, Shop is Currently Disabled';
      }

      $responses[] = $response;
    }
  }
  else {
    // check if it's a game code OR friend code
    $text = strtoupper(preg_replace('/[^A-Za-z0-9]/', '', $incoming['text']));
    $gc = $db->query("SELECT * FROM sg_game_codes WHERE text = :text", [':text' => $text])->fetchObject();
    // $fc_player = summergame_player_load(array('friend_code' => $text));
    if ($gc->code_id) { // } || $fc_player['pid']) {
      $game_code_text = TRUE;
      if (!$player['pid']) {
        $new_player_needed = TRUE;
      }
    }
  }

  // New Player handling
  if ($new_player_needed) {
    $new_player = array('name' => $incoming['phone'], 'phone' => $incoming['phone']);
    $player = summergame_player_save($new_player);
    $response = $response_template;
    $gameDisplayName = \Drupal::config('summergame.settings')->get('game_display_name');
    $response['text'] = "New $gameDisplayName player #" . $player['pid'] . " created for this phone.";
    $responses[] = $response;

    // Special message
    if ($current_game_term == 'MLEADershipGame') {
      $response = $response_template;
      $response['text'] = 'Welcome to the M-LEADership Game - a university-wide, month long scavenger hunt ' .
                          'to find leadership resources across campus! To get started, please fill out this ' .
                          'form to be eligible to win prizes: https://forms.gle/hLD4E1iTKw8CGZcx9. ' .
                          'Let the adventure begin!';
      $responses[] = $response;
    }

    // Signup bonus
    $points = summergame_player_points($player['pid'], 100, 'Signup',
                                       'Signed Up for the Game', 'via:txt');
    $response = $response_template;
    $response['text'] = "Earned $points points for signing up!";
    $responses[] = $response;
  }

  if ($game_card_text || $game_code_text) {
    // Process results for ALL Player records with this number
    $res = $db->query('SELECT pid FROM sg_players WHERE phone = :phone', [':phone' => $incoming['phone']]);
    while ($player_info = $res->fetchObject()) {
      $player = summergame_player_load(array('pid' => $player_info->pid));
      // Associate a gamecard with the player if a game card ID
      if ($game_card_text) {
        $player['gamecard'] = $incoming['text'];
        summergame_player_save($player);
        $response = $response_template;
        $response['text'] .= 'Updated your player record with the scorecard ID ' . $incoming['text'];
        $responses[] = $response;
      }
      else {
        // Try to redeem text as a game code
        $status = summergame_redeem_code($player, $incoming['text']);

        if ($status['success'] || $status['error']) {
          $response = $response_template;
          $response['text'] .= $status['success'] . $status['error'];
          $responses[] = $response;
          if (isset($status['clue'])) {
            $response = $response_template;
            $response['text'] = 'New Clue: ' . $status['clue'];
            $responses[] = $response;
          }
        }

        // Add any drupal messages that may have been set (badge awarding, limits)
        $messages = \Drupal::messenger()->all();
        if (isset($messages['status'])) {
          foreach ($messages['status'] as $message) {
            $response = $response_template;
            $response['text'] = $message;
            $responses[] = $response;
          }
        }
        if (isset($messages['warning'])) {
          foreach ($messages['warning'] as $message) {
            $response = $response_template;
            $response['text'] = 'WARNING: ' . $message;
            $responses[] = $response;
          }
        }
        if (isset($messages['error'])) {
          foreach ($messages['error'] as $message) {
            $response = $response_template;
            $response['text'] = 'ERROR: ' . $message;
            $responses[] = $response;
          }
        }

/* No Do or Diag mode for now
        if (variable_get('summergame_dod_enabled', FALSE)) {
          if ($status['success']) {
            // Check how many DoD game codes they have received
            $res = db_query("SELECT COUNT(*) AS dod_count FROM sg_ledger WHERE pid = %d " .
                            "AND game_term = 'DoOrDiag' AND " .
                            "((metadata LIKE '%%gamecode:%%' AND metadata NOT LIKE '%%gamecode:READY%%') " .
                            "OR (type = 'New Track' AND points > 0))",
                            $player['pid']);
            $row = db_fetch_object($res);
            if ($row->dod_count == 4) {
              $response = $response_template;
              $response['text'] .= "You have completed the short game! Go receive a prize or continue playing!";
              $responses[] = $response;
            }
            else if ($row->dod_count == 10) {
              $response = $response_template;
              $response['text'] .= "You have completed the long game! Go get your prize!";
              $responses[] = $response;
            }
          }
        }
*/
        // If not recognized, no response to allow other handlers to respond
      }
    }
  }
  // New Nickname
  else if ($nickname_update) {
    $player['nickname'] = substr($incoming['text'], strpos($incoming['text'], ' ') + 1);
    $player['show_leaderboard'] = 1;
    $player = summergame_player_save($player);
    $response = $response_template;
    $response['text'] .= 'Your Player nickname has been set to ' . $player['nickname'];
    $responses[] = $response;
  }
  // Lego Contest
  else if ($summergame_settings->get('summergame_lego_enabled')) {
    $text = strtoupper($incoming['text']);
    if (preg_match('/^L[PKEMHA][\d]{3}$/', $text)) {
      $redis = new Client($summergame_settings->get('summergame_redis_conn'));

      // Set category vote for this phone
      $redis->set('lego_vote:' . $text[1] . ':' . $incoming['phone'], $text);
      $response = $response_template;
      $response['text'] .= 'Your vote has been recorded for Group ' . $text[1];
      $responses[] = $response;
    }
  }
/*
ALTER TABLE `sg_ledger_part` DROP PRIMARY KEY, ADD PRIMARY KEY(`lid`, `game_term`);
ALTER TABLE `sg_ledger`
PARTITION BY LIST COLUMNS (game_term)
PARTITIONS 3 (
  PARTITION p0 VALUES IN ('SummerGame2024'),
  PARTITION p1 VALUES IN ('SummerGame2011', 'SummerGame2012', 'SummerGame2013', 'SummerGame2014', 'SummerGame2015', 'SummerGame2016', 'SummerGame2017', 'SummerGame2018', 'SummerGame2019', 'SummerGame2020', 'SummerGame2021', 'SummerGame2022', 'SummerGame2023','SummerGameClassic'),
  PARTITION p2 VALUES IN ('BookPrizeToken', 'DownloadOfTheDay', 'HallOfFame', 'MLEADershipGame', 'Points-O-Matic', 'StreetsQuest', 'TreasureQuest', 'WorldHistoryQuest')
)
  // Do Or Diag
  else if (variable_get('summergame_dod_enabled', FALSE)) {
    $text = strtoupper($incoming['text']);
    if ($dod_response = summergame_dod_response($text, $player['pid'])) {
      $response = $response_template;
      $response['text'] .= $dod_response;
      $responses[] = $response;

      // Check how many DoD game codes they have received
      $res = db_query("SELECT COUNT(*) AS dod_count FROM sg_ledger WHERE pid = %d " .
                      "AND game_term = 'DoOrDiag' AND " .
                      "((metadata LIKE '%%gamecode:%%' AND metadata NOT LIKE '%%gamecode:READY%%') " .
                      "OR (type = 'New Track' AND points > 0))",
                      $player['pid']);
      $row = db_fetch_object($res);
      if ($row->dod_count == 4) {
        // Check if they have finished the short game
        $ledger = db_fetch_object(db_query("SELECT * FROM sg_ledger WHERE pid = %d " .
                                           "AND game_term = 'DoOrDiag' AND " .
                                           "Type LIKE 'Completed Short Game'", $player['pid']));
        if (!$ledger->lid) {
          summergame_player_points($player['pid'], 0, 'Completed Short Game',
                                   'You answered four Do Or Diag questions', '', 'DoOrDiag');
          $response = $response_template;
          $response['text'] .= "You have completed the short game! Go receive a prize or continue playing!";
          $responses[] = $response;
        }
      }
      else if ($row->dod_count == 10) {
        // Check if they have finished the long game
        $ledger = db_fetch_object(db_query("SELECT * FROM sg_ledger WHERE pid = %d " .
                                           "AND game_term = 'DoOrDiag' AND " .
                                           "Type LIKE 'Completed Long Game'", $player['pid']));
        if (!$ledger->lid) {
          summergame_player_points($player['pid'], 0, 'Completed Long Game',
                                   'You answered ten Do Or Diag questions', '', 'DoOrDiag');
          $response = $response_template;
          $response['text'] .= "You have completed the long game! Go get your prize!";
          $responses[] = $response;
        }
      }
    }
  }
*/
/*
  // Check if Trivia is active
  if (variable_get('summergame_trivia_active', FALSE) && !count($responses) && $player['pid']) {
    $guess = $incoming['text'];
    $answer = variable_get('summergame_trivia_answer', '');
    $trivia_game_term = variable_get('summergame_trivia_game_term', '');

    db_query("INSERT INTO sg_trivia_guesses (guess) VALUES ('%s')", $guess);
    $guesstext = strtoupper(preg_replace('/[^A-Za-z0-9]/', '', $incoming['text']));
    if (stripos($guesstext, $answer) !== FALSE) {
      // Correct Answer
      if (db_query("INSERT INTO sg_trivia_correct (phone) VALUES ('%d')", $incoming['phone'])) {
        $place = db_last_insert_id('sg_trivia', 'id');
        $points = 101 - $place;

        summergame_player_points($player['pid'], $points, 'Correct Trivia Answer',
                                 "Correct Answer #$place: $guess", '', $trivia_game_term);

        $response = $response_template;
        $response['text'] = "Your answer of \"$guess\" is Correct Answer #$place! You earn $points points.";
      }
      else {
        // Duplicate correct answer
        $response = $response_template;
        $response['text'] = "Duplicate answer \"$guess\" received.";
      }
//      if ($place == 1) {
//        $response['text'] .= ' Please see a staff member to claim your prize';
//      }
      $responses[] = $response;
    }
    else {
      $response = $response_template;
      $response['text'] = "Sorry, your answer of \"$guess\" was incorrect. Please try again";
      $responses[] = $response;
    }
  }
*/

  if (count($responses)) {
    return $responses;
  }
}

function summergame_dod_response($text, $pid) {
  $response = '';
  $db = \Drupal::database();

  // Set a new connector to the CouchDB server
  $summergame_settings = \Drupal::config('summergame.settings');
  $dsn = $summergame_settings->get('summergame_couch_dsn');
  $db = $summergame_settings->get('summergame_couch_db');
  $couch = new CouchClient($dsn, $db);

  // Grab DoD Data from Couch
  $track_lookup = array();
  try {
    $tracks = $couch->getDoc('tracks');
    foreach ($tracks as $code => $track) {
      if ($code[0] != '_') {
        $track_lookup[$code] = $track;
      }
    }
  }
  catch (Exception $e) {
    echo "Something weird happened: ".$e->getMessage()." (errcode=".$e->getCode().")\n";
  }

  if ($new_track = $track_lookup[$text]) {
    // check if they've already received points for this track
    $row = $db->query("SELECT * FROM sg_ledger WHERE pid = $pid " .
                      "AND metadata LIKE '%%track:$new_track%%' " .
                      "AND points > 0"
                    )->fetchAssoc();
    $points = ($row['lid'] ? 0 : 500);

    summergame_player_points($pid, $points, 'New Track', "Started the $new_track Track",
                             'track:' . $new_track, 'DoOrDiag');
    $response = "You just received $points Do Or Diag points, and you are now on the $new_track trivia track.";
  }
  else try {
    $questions = $couch->getDoc($text);

    // Determine player track
    $row = $db->query("SELECT * FROM sg_ledger WHERE pid = $pid AND game_term = 'DoOrDiag' " .
                    "AND metadata LIKE '%track:%' ORDER BY timestamp DESC LIMIT 1")->fetchAssoc();
    preg_match('/track:([\w]+)/', $row['metadata'], $matches);
    $track = $matches[1];

    $response = $questions->$track;
  }
  catch (Exception $e) {
    // no couch doc ID matches that text
  }

  return $response;
}

/**
 * UTILITY: Determine access to a player record
 */
function summergame_player_access($pid) {
  $access = FALSE;

  if ($pid = (int) $pid) {
    $user = \Drupal::currentUser();
    if ($user->hasPermission('administer summergame')) {
      $access = TRUE;
    }
    else {
      if ($uid = $user->id()) {
        $player = summergame_player_load($pid);
        if ($uid == $player['uid']) {
          $access = TRUE;
        }
      }
    }
  }
  return $access;
}

/**
 * UTILITY: Lookup a player record (based on the user_load function)
 */
function summergame_player_load($player_info = []) {
  // Dynamically compose a SQL query:
  $query = [];
  $params = [];

  // Default to pid lookup
  if (is_numeric($player_info)) {
    $player_info = ['pid' => $player_info];
  }
  else if (!is_array($player_info)) {
    return FALSE;
  }

  foreach ($player_info as $key => $value) {
    if ($value) {
      if ($key == 'pid' || $key == 'phone' || $key == 'uid') {
        $query[] = "$key = :$key";
      }
      else {
        $query[] = "LOWER($key) = LOWER(:$key)";
      }
      $params[":$key"] = $value;
    }
  }

  if (count($params)) {
    $db = \Drupal::database();
    $result = $db->query('SELECT * FROM {sg_players} WHERE ' . implode(' AND ', $query) .
                         ' ORDER BY pid ASC LIMIT 1', $params);
    $player = $result->fetchAssoc();
  }

  if ($player['pid']) {
    // Load badge ids
    $result2 = $db->query('SELECT * FROM {sg_players_badges} WHERE pid = ' . $player['pid']);
    while ($badge = $result2->fetchObject()) {
      $player['bids'][$badge->bid] = $badge->timestamp;
    }
    return $player;
  }
  else {
    return FALSE;
  }
}

/**
 * UTILITY: Load ALL players associated with a user
 */
function summergame_player_load_all($uid) {
  $db = \Drupal::database();
  $result = $db->query('SELECT * FROM sg_players WHERE uid = ' . (int) $uid . ' ORDER BY pid ASC');
  $players = [];
  while ($player = $result->fetchAssoc()) {
    $players[] = $player;
  }

  return $players;
}

/**
 * Load the active player record for the currently logged in user, if set
 */
function summergame_get_active_player() {
  $active_player = FALSE;

  $user = \Drupal::currentUser();
  if ($user->isAuthenticated()) {
    // Get all players for this user
    $user_players = summergame_player_load_all($user->id());
    if (count($user_players)) {
      // Determine currently active player
      $userData = \Drupal::service('user.data');
      if ($sg_active_pid = $userData->get('summergame', $user->id(), 'sg_active_pid')) {
        foreach ($user_players as $i => $user_player) {
          if ($user_player['pid'] == $sg_active_pid) {
            $active_player = $user_player;
            unset($user_players[$i]);
          }
        }
      }
      else {
        $active_player = array_shift($user_players);
      }

      $active_player = summergame_player_load($active_player['pid']);
      if (count($user_players)) {
        $active_player['other_players'] = $user_players;
      }
    }
  }

  return $active_player;
}

/**
 * UTILITY: Load player points
 */
function summergame_get_player_points($pid, $game_term = '', $type = '') {
  $term_filter = FALSE;
  $player_points = [
    'career' => 0,
  ];

  $query = 'SELECT * FROM sg_ledger WHERE pid = :pid';
  $args = [':pid' => $pid];
  if ($game_term) {
    $query .= " AND game_term = :game_term";
    $args[':game_term'] = $game_term;
    $term_filter = TRUE;
  }
  if ($type) {
    $query .= " AND type = :type";
    $args[':type'] = $type;
  }
  $query .= ' ORDER BY timestamp DESC';

  $db = \Drupal::database();
  $res = $db->query($query, $args);

  while ($row = $res->fetchAssoc()) {
    $game_term = $row['game_term'];
    $type = $row['type'];

    // Only include ledger rows if filtered to a game term
    if ($term_filter) {
      $player_points[$game_term]['ledger'][] = $row;
    }

    // if game term is not set, initialize point values
    if (!isset($player_points[$game_term])) {
      $player_points[$game_term] = [
        'balance' => 0,
        'total' => 0,
        'prize_count' => 0,
        'max_timestamp' => $row['timestamp'],
        'min_timestamp' => $row['timestamp'],
      ];
    }
    else {
      // Check min timestamp for game term
      // (row sort is timestamp DESC so max_timestamp is always set with first row of game term)
      if ($row['timestamp'] < $player_points[$game_term]['min_timestamp']) {
        $player_points[$game_term]['min_timestamp'] = $row['timestamp'];
      }
    }

    // if type for this game term is not set, initialize point value
    if (!isset($player_points[$game_term]['types'][$type])) {
      $player_points[$game_term]['types'][$type] = 0;
    }

    $player_points[$game_term]['balance'] += $row['points'];
    $player_points[$game_term]['types'][$type] += $row['points'];
    if ($row['points'] > 0 && strpos($row['metadata'], 'leaderboard:no') === FALSE) {
      // Don't count non-leaderboard points in the total
      $player_points[$game_term]['total'] += $row['points'];
      $player_points['career'] += $row['points'];
    }
    if (preg_match('/prize_count:(-?\d+)/', $row['metadata'], $matches)) {
      $player_points[$game_term]['prize_count'] += $matches[1];
    }
    else {
      $player_points[$game_term]['prize_count'] += 0;
    }
  }

  // Sort type points
  foreach ($player_points as $game_term => &$details) {
    if (isset($details['types'])) {
      arsort($details['types']);
    }
  }

  // Get old badges
  $res = $db->query("SELECT * FROM sg_players_badges, sg_badges " .
                    "WHERE sg_players_badges.pid = :pid AND sg_players_badges.bid = sg_badges.bid " .
                    "ORDER BY sg_players_badges.timestamp ASC", [':pid' => $pid]);
  while ($badge = $res->fetchAssoc()) {
    $game_term = $badge['game_term'];
    $badge['img'] = '/files/old-sg-images/' . $badge['image'] . '_100.png';
    $player_points[$game_term]['badges'][] = $badge;
  }

  // Get new badges
  $user = User::load(\Drupal::currentUser()->id());
  $play_tester = $user->hasPermission('play test summergame');
  $play_test_term_id = \Drupal::config('summergame.settings')->get('summergame_play_test_term_id');

  $res = $db->query("SELECT gt.entity_id AS bid, gt.field_badge_game_term_value AS game_term, b.bid AS pbid " .
                    "FROM node__field_badge_game_term gt, sg_players_badges b " .
                    "WHERE gt.entity_id = b.bid " .
                    "AND b.pid = :pid " .
                    "ORDER BY bid ASC", [':pid' => $pid]);
  while ($badge = $res->fetchAssoc()) {
    $game_term = $badge['game_term'];
    $badge['nid'] = $badge['bid'];
    $node = Node::load($badge['bid']);

    // If badge is in the play tester series and user is not a play tester, skip it
    if (!$play_tester) {
      foreach ($node->field_sg_badge_series_multiple as $badge_series) {
        if ($badge_series->target_id == $play_test_term_id) {
          continue 2;
        }
      }
    }

    $fid = File::load($node->get('field_badge_image')->target_id);
    if ($fid) {
      $badge['img'] = \Drupal::service('file_url_generator')->generateAbsoluteString($fid->getFileUri());
    }
    $badge['title'] = $node->get('title')->value;
    $player_points[$game_term]['badges'][] = $badge;
  }

  return $player_points;
}

/**
 * UTILITY: Get a player's reading log
 */
function summergame_get_player_log($pid, $game_term = '') {
  $db = \Drupal::database();
  $log = [];

  // Set game_term
  if (empty($game_term)) {
    $game_term = \Drupal::config('summergame.settings')->get('summergame_current_game_term');
  }

  $res = $db->query("SELECT * FROM sg_ledger " .
                    "WHERE pid = :pid " .
                    "AND metadata LIKE '%logged:1%' " .
                    "AND game_term = :game_term " .
                    "ORDER BY timestamp DESC", [':pid' => $pid, ':game_term' => $game_term]);

  while ($row = $res->fetchObject()) {
    $log[] = $row;
  }

  return $log;
}

/**
 * UTILITY: Get a player's classic reading game completion status
 */
function summergame_get_classic_status($pid) {
  $db = \Drupal::database();
  $completion_gamecode = \Drupal::config('summergame.settings')->get('summergame_completion_gamecode');
  $completed = 0;

  // check if player has submitted the completion game code
  $row = $db->query("SELECT * FROM sg_ledger WHERE pid = :pid AND metadata LIKE :metadata",
                    [':pid' => $pid, ':metadata' => "%gamecode:$completion_gamecode%"])->fetchObject();
  if ($row->lid) {
    $completed = $row->timestamp;
  }

  return $completed;
}

/**
 * UTILITY: Get a user's Home Code
 */
function summergame_get_homecode($uid, $game_term = '') {
  $db = \Drupal::database();
  if (empty($game_term)) {
    $game_term = \Drupal::config('summergame.settings')->get('summergame_current_game_term');
  }
  $row = $db->query("SELECT * FROM sg_game_codes WHERE creator_uid = :uid AND game_term = :game_term AND " .
                    "(clue LIKE '%\"homecode\"%' OR clue LIKE '%\"branchcode\"%')",
                    [':uid' => $uid, ':game_term' => $game_term])->fetchObject();
  return $row;
}

/**
 * UTILITY: Save a player record
 */
function summergame_player_save($player) {
  $db = \Drupal::database();

  if ($pid = $player['pid']) {
    // Update existing player record
    unset($player['pid']);
    $db->update('sg_players')->fields($player)->condition('pid', $pid)->execute();
  }
  else {
    // New player record
    $pid = $db->insert('sg_players')->fields($player)->execute();
  }

  return summergame_player_load(array('pid' => $pid));
}

/**
 * UTILITY: Delete a player record
 *
 * Uses the same arguments as summergame_player_load
 */
function summergame_player_delete($player_info) {
  if ($player = summergame_player_load($player_info)) {
    $db = \Drupal::database();
    // Delete points
    $db->query("DELETE FROM sg_ledger WHERE pid = :pid", [':pid' => $player['pid']]);
    // Delete badges
    $db->query("DELETE FROM sg_players_badges WHERE pid = :pid", [':pid' => $player['pid']]);
    // Delete team memberships
    $db->query("DELETE FROM sg_players_teams WHERE pid = :pid", [':pid' => $player['pid']]);
    // Delete player info
    $db->query("DELETE FROM sg_players WHERE pid = :pid", [':pid' => $player['pid']]);
    // Check if active player, reset if so
    if ($player['uid']) {
      $userData = \Drupal::service('user.data');
      if ($player['pid'] == $userData->get('summergame', $player['uid'], 'sg_active_pid')) {
        $userData->delete('summergame', $player['uid'], 'sg_active_pid');
      }
    }
  }
}

/**
 * UTILITY: Redeem a game code for a player
 */
function summergame_redeem_code($player, $code_text) {
  $db = \Drupal::database();
  $config = \Drupal::config('summergame.settings');
  $result = [];

  // Remove non-alphanumerics from Game Code text and convert to upper case
  $code_text = strtoupper(preg_replace('/[^A-Za-z0-9]/', '', $code_text));

  // Check for Game Code (limit to the latest one when text is reused)
  $code = $db->query("SELECT * FROM sg_game_codes WHERE text = :text ORDER BY created DESC LIMIT 1",
                      [':text' => $code_text])->fetchObject();
  if ($code->code_id) {
    // Existing code
    $now = time();
    if ($now < $code->valid_start) {
      $start_date = date('F j, Y, g:i a', $code->valid_start);
      return ['error' => "Code \"$code->text\" is not yet valid. It will activate on $start_date"];
    }
    else if ($now > $code->valid_end) {
      $end_date = date('F j, Y, g:i a', $code->valid_end);
      return ['error' => "Code \"$code->text\" is no longer valid. It expired on $end_date"];
    }
    else if ($code->max_redemptions && ($code->num_redemptions >= $code->max_redemptions)) {
      return ['error' => "Code \"$code->text\" has reached maximum number of redemptions"];
    }
    else {
      // check if player has already redeemed this code
      $existing = $db->query("SELECT * FROM sg_ledger WHERE pid = :pid AND metadata LIKE :metadata AND game_term = :game_term",
                            [':pid' => $player['pid'], ':metadata' => 'gamecode:' . $code->text, ':game_term' => $code->game_term])
                            ->fetchObject();
      if (isset($existing->lid)) {
        $existing_date = date('F j, Y, g:i a', $existing->timestamp);
        return ['error' => "Code \"$code->text\" already redeemed on $existing_date"];
      }
    }
    // Go ahead and redeem
    $db->update('sg_game_codes')
      ->condition('code_id', $code->code_id, '=')
      ->expression('num_redemptions', 'num_redemptions + 1')
      ->execute();

    if ($code->points_override) {
      $code->points = $code->points_override;
    }
    else if ($code->diminishing) {
      // Adjust points if diminishing
      $code->points -= $code->num_redemptions;
    }
    if ($code->game_term_override) {
      $code->game_term = $code->game_term_override;
    }

    // Add Badge title to description if code is part of a formula
    $res = $db->query("SELECT gt.entity_id AS bid, n.title AS title, f.field_badge_formula_value AS formula " .
                      "FROM node_field_data n, node__field_badge_game_term gt, node__field_badge_formula f " .
                      "WHERE n.nid = gt.entity_id " .
                      "AND gt.entity_id = f.entity_id " .
                      "AND n.status = 1 " .
                      "AND gt.field_badge_game_term_value = :game_term " .
                      "AND f.field_badge_formula_value LIKE :code_text " .
                      "ORDER BY bid DESC LIMIT 1",
                      [':game_term' => $code->game_term, ':code_text' => "%$code->text%"])->fetchObject();
    if (isset($res->bid)) {
      $badge_formula = strtolower($res->formula);
      $badge_formula_split = preg_split('/[,|]/', $badge_formula);
      if (in_array(strtolower($code->text), $badge_formula_split)) {
        $code->description .= " [Part of the $res->title badge.]";
        $result['bid'] = $res->bid;
      }
    }

    // Add sequence number to description
    if ($code->sequence_num) {
      $code->description .= ' (' . $code->sequence_num;
      if ($code->sequence_total) {
        $code->description .= '/' . $code->sequence_total;
      }
      $code->description .= ')';
    }

    $points = summergame_player_points($player['pid'], $code->points, 'Game Code', $code->description, 'gamecode:' . $code->text, $code->game_term);
    $message = ($player['nickname'] ? $player['nickname'] : $player['name']) .
               " redeemed code \"$code->text\" for $points $code->game_term points";
    if ($code->description) {
      $message .= ': ' . $code->description;
    }

    $result['success'] = $message;

    // Look for Clue trigger
    $gc = $db->query('SELECT * FROM sg_game_codes WHERE clue_trigger = :code_text AND game_term = :game_term',
                     [':code_text' => $code->text, ':game_term' => $code->game_term])->fetchObject();
    if (isset($gc->code_id)) {
      $result['clue'] = $gc->clue;
    }

    // If code is completion code, check for completion bonus
    if ($config->get('summergame_completion_gamecode') == $code->text) {
      summergame_check_completion_bonus($player['pid']);
    }

    return $result;
  }
  else {
    return ['warning' => "Code is not recognized"];
  }
}

/**
 * UTILITY: Get count of ledger rows for a player
 */
function summergame_get_ledger_count($pid, $filter = '') {
  // Dynamically compose a SQL query:
  $query = ['pid = :pid'];
  $params = [$pid];

  if (is_array($filter)) {
    foreach ($filter as $key => $value) {
      $query[] = "$key LIKE :$key";
      $params[":$key"] = $value;
    }
  }

  $db = \Drupal::database();
  $result = $db->query('SELECT COUNT(*) AS ledger_count FROM sg_ledger WHERE ' .
                     implode(' AND ', $query), $params);
  $count = $result->fetch();

  return $count->ledger_count;
}

/**
 * UTILITY: Apply points to a player
 */
function summergame_player_points($pid, $points, $type, $description = '', $metadata = '', $game_term = '') {
  $db = \Drupal::database();
  $summergame_settings = \Drupal::config('summergame.settings');

  // Set game_term
  if (empty($game_term)) {
    $game_term = $summergame_settings->get('summergame_current_game_term');
  }

  // Check for game limit for this type of scoring
  $game_limits = json_decode($summergame_settings->get('summergame_game_limits'), TRUE);
  if (isset($game_limits[$type])) {
    $limit = $game_limits[$type]['limit'];
    $duration = $game_limits[$type]['duration'];

    $sql = "SELECT SUM(points) AS total FROM sg_ledger " .
       "WHERE pid = :pid " .
       "AND type = :type " .
       "AND game_term = :game_term";
    if ($duration == 'daily') {
      $cutoff = strtotime('today');
      $sql .= " AND timestamp > $cutoff";
    }

    $row = $db->query($sql, [':pid' => $pid, ':type' => $type, ':game_term' => $game_term])->fetchObject();

    $total = $row->total + $points;
    if ($total > $limit) {
      // If over the limit, cap the point total at the daily limit
      $overage = $total - $limit;
      \Drupal::messenger()->addWarning("Sorry, your score of $points brings you over the $duration limit of $limit by $overage.");
      $points -= $overage;
    }
    else {
      \Drupal::messenger()->addMessage("You have earned $total points of your $duration limit of $limit for $type scoring");
    }
  }

  if (is_array($metadata)) {
    // Convert metadata to string
    $md_string = '';
    if (count($metadata)) {
      foreach ($metadata as $key => $value) {
        if (!is_numeric($key)) {
          $md_string .= $key . ':' . $value . ' ';
        }
        else {
          $md_string .= $value . ' ';
        }
      }
    }
    $metadata = trim($md_string);
  }

  // Remove extended characters from description field
  $description = preg_replace('/[^(\x20-\x7F)]*/','', $description);

  // Adjust timestamp as needed
  $timestamp = time();
  if (preg_match('/time_adjust:(-?\d+)/', $metadata, $matches)) {
    $timestamp += (int) $matches[1];
  }

  $db->insert('sg_ledger')->fields([
    'pid' => $pid,
    'points' => $points,
    'type' => $type,
    'metadata' => $metadata,
    'description' => $description,
    'game_term' => $game_term,
    'timestamp' => $timestamp,
  ])->execute();

  // Check if the new points affect any badges
  if ($messages = summergame_player_check_badges($pid, $game_term)) {
    foreach ($messages as $message) {
      \Drupal::messenger()->addMessage($message);
    }
  }

  return $points;
}

function summergame_other_players_message() {
  $message = '';

  // Check for other players if awarding points to logged in user
  $player = summergame_get_active_player();
  if (isset($player['other_players'])) {
    $other_links = array();
    foreach ($player['other_players'] as $other_player) {
      $other_links[] = Link::createFromRoute($other_player['nickname'] ? $other_player['nickname'] : $other_player['name'],
                                             'summergame.player.setactive',
                                             ['pid' => $other_player['pid']])->toString();
    }
    $message .= ' (Make another player active?: ' .
                implode(' OR ', $other_links) . ')';
  }

  return $message;
}

/**
 * UTILITY: Check player for new badges
 */
function summergame_player_check_badges($pid, $game_term) {
  $pid = (int) $pid;
  $db = \Drupal::database();
  $messages = [];

  $player_bids = [];
  $res = $db->query('SELECT * FROM sg_players_badges WHERE pid = ' . $pid);
  while ($player_badge = $res->fetchObject()) {
    $player_bids[] = $player_badge->bid;
  }

  $res = $db->query("SELECT gt.entity_id AS bid, f.field_badge_formula_value AS formula " .
                    "FROM node_field_data n, node__field_badge_game_term gt, node__field_badge_formula f " .
                    "WHERE n.nid = gt.entity_id " .
                    "AND gt.entity_id = f.entity_id " .
                    "AND n.status = 1 " .
                    "AND gt.field_badge_game_term_value = :game_term " .
                    "AND f.field_badge_formula_value != '' " .
                    "ORDER BY bid ASC", [':game_term' => $game_term]);
  while ($badge = $res->fetchObject()) {
    if (!in_array($badge->bid, $player_bids)) {
      $awarded = FALSE;
      if (strpos($badge->formula, 'SELFAWARD:') === 0) {
        // Self Award Badge
        $tasks = explode('|', substr($badge->formula, strlen('SELFAWARD:')));
        $total_count = count($tasks);
        $player_count = $db->query("SELECT COUNT(lid) AS player_count FROM `sg_ledger` WHERE `pid` = $pid AND metadata LIKE '%badgetask:$badge->bid%'")->fetchField();
        if ($player_count >= $total_count) {
          $awarded = summergame_player_award_badge($pid, $badge->bid);
        }
      }
      if (strpos($badge->formula, '**')) {
        // Multi Game Term ("Hall of Fame") Badge
        list($hof_type, $game_term_pattern, $badge_limit) = explode('**', $badge->formula);
        if ($hof_type == 'game_terms') {
          // Count distict Game Terms that match the pattern
          $gt_count = $db->query("SELECT COUNT(DISTINCT `game_term`) AS gt_count FROM `sg_ledger` WHERE `pid` = $pid AND `game_term` LIKE :game_term_pattern",
                                   [':game_term_pattern' => "%$game_term_pattern%"])->fetchObject();
          if ($gt_count->gt_count >= $badge_limit) {
            $awarded = summergame_player_award_badge($pid, $badge->bid);
          }
        }
        elseif ($hof_type == 'total_points') {
          // Total points earned in Game Terms that match the pattern
          $point_total = $db->query("SELECT SUM(`points`) AS point_total FROM `sg_ledger` WHERE `pid` = $pid AND `game_term` LIKE :game_term_pattern " .
                               "AND `points` > '0' AND `metadata` NOT LIKE '%leaderboard:no%'",
                               [':game_term_pattern' => "%$game_term_pattern%"])->fetchObject();
          if ($point_total->point_total >= $badge_limit) {
            $awarded = summergame_player_award_badge($pid, $badge->bid);
          }
        }
      }
      elseif (preg_match('/^{([\d,]+)}$/', $badge->formula, $matches)) {
        // Badge collection badge
        $eligible = TRUE;
        foreach (explode(',', $matches[1]) as $formula_bid) {
          if (!in_array($formula_bid, $player_bids)) {
            $eligible = FALSE;
            break;
          }
        }
        if ($eligible) {
          $awarded = summergame_player_award_badge($pid, $badge->bid);
        }
      }
      elseif (strpos($badge->formula, '^^')) {
        // Multiple days of a ledger type formula (streak)
        list($count_limit, $text_pattern) = explode('^^', $badge->formula);
        $lid_count = $db->query("SELECT COUNT(DISTINCT FROM_UNIXTIME(`timestamp`, '%j')) AS lid_count FROM sg_ledger WHERE pid = $pid " .
                                "AND (type LIKE :text_pattern OR metadata LIKE :gamecode_pattern) AND game_term = :game_term",
                                [':text_pattern' => $text_pattern, ':gamecode_pattern' => "gamecode:$text_pattern%", ':game_term' => $game_term])->fetchObject();
        if ($lid_count->lid_count >= $count_limit) {
          $awarded = summergame_player_award_badge($pid, $badge->bid);
        }
      }
      elseif (strpos($badge->formula, '::')) {
        // Multiple of a ledger type formula
        $formula_parts = explode('::', $badge->formula);
        if (count($formula_parts) == 2) {
          // Default multiple of a ledger pattern (type field or gamecode pattern)
          list($count_limit, $text_pattern) = $formula_parts;
          $lid_count = $db->query("SELECT COUNT(lid) AS lid_count FROM sg_ledger WHERE pid = $pid " .
                                  "AND (type LIKE :text_pattern OR metadata LIKE :gamecode_pattern) AND game_term = :game_term",
                                  [':text_pattern' => $text_pattern, ':gamecode_pattern' => "gamecode:$text_pattern%", ':game_term' => $game_term])->fetchObject();
          if ($lid_count->lid_count >= $count_limit) {
            $awarded = summergame_player_award_badge($pid, $badge->bid);
          }
        }
        elseif (count($formula_parts) == 3) {
          // New multiple of a ledger pattern (count::field::pattern)
          list($count_limit, $ledger_field, $text_pattern) = $formula_parts;
          $lid_count = $db->query("SELECT COUNT(lid) AS lid_count FROM sg_ledger WHERE pid = $pid " .
                                  'AND game_term = :game_term ' .
                                  "AND $ledger_field LIKE :text_pattern",
                                  [':game_term' => $game_term, ':text_pattern' => $text_pattern])->fetchObject();
          if ($lid_count->lid_count >= $count_limit) {
            $awarded = summergame_player_award_badge($pid, $badge->bid);
          }
        }
      }
      else {
        // Collection Badge
        $eligible = TRUE;
        foreach (explode(',', $badge->formula) as $text_pattern) {
          $query = "SELECT lid FROM sg_ledger WHERE pid = :pid AND (";
          $args = [
            ':pid' => $pid
          ];

          $text_patterns = explode('|', $text_pattern);
          foreach ($text_patterns as $i => &$pattern) {
            $args[':type_' . $i] = $pattern;
            $args[':metadata_' . $i] = 'gamecode:' . $pattern;
            $pattern = "(type LIKE :type_$i OR metadata LIKE :metadata_$i)";
          }
          $query .= implode(' OR ', $text_patterns);

          $query .= ") AND game_term = :game_term LIMIT 1";
          $args[':game_term'] = $game_term;

          $ledger = $db->query($query, $args)->fetchObject();

          if (!isset($ledger->lid)) {
            $eligible = FALSE;
            break;
          }
        }
        if ($eligible) {
          $awarded = summergame_player_award_badge($pid, $badge->bid);
        }
      }

      if ($awarded) {
        $badge_node = \Drupal::entityTypeManager()->getStorage('node')->load($badge->bid);
        $badge_title = $badge_node->get('title')->value;
/*
        $badge_detail_link = l('Badge Detail Page', 'summergame/badge/' . $badge->bid,
                               array('html' => TRUE,
                                     'query' => array('lightbox' => 1),
                                     'attributes' => array('rel' => 'lightframe'),
                                    )
                              );
*/
        $messages[] = "Earned the $badge_title Badge!"; //Share your accomplishment on Twitter or Facebook on the " . $badge_detail_link;
        $player_bids[] = $badge->bid;
        // check if a bonus should be applied
        if ($points = $badge_node->get('field_badge_points')->value) {

          /* check for overrides
          if ($badge_node->get('field_badge_points_override')->value) {
            $points = $badge_node->get('points_override')->value;
          }
          if ($badge_node->get('field_badge_game_term_override')->value) {
            $game_term = $badge_node->get('game_term_override')->value;
          }
          */

          $db->insert('sg_ledger')->fields([
            'pid' => $pid,
            'points' => $points,
            'type' => 'Badge Bonus',
            'metadata' => '',
            'description' => "Earned the $badge_title Badge",
            'game_term' => $game_term,
            'timestamp' => time(),
          ])->execute();

          $messages[] = "Received $points bonus $game_term points for earning the $badge_title Badge";
        }
/*
        // check if an email should be sent to awardee
        if ($email_message = $badge->get('email_message')->value) {
          // Find email address attached to user account
          $u = db_fetch_object(db_query("SELECT users.mail AS mail FROM users, sg_players WHERE users.uid = sg_players.uid AND sg_players.pid = %d", $pid));
          if ($u->mail) {
            $subject = "Congratulations! You've earned the $badge->title Badge";
            $from = variable_get('site_mail', ini_get('sendmail_from'));
            if ($badge->email_attachment) {
              summergame_email_attachment($u->mail, $subject, $badge->email_message, $from, $badge->email_attachment);
            }
            else {
              mail($u->mail, $subject, $badge->email_message, "From: $from");
            }
            $messages[] = "NOTE: A special message has been sent to $u->mail with further information";
          }
          else {
            $messages[] = "NOTE: This Badge includes a special email message, but we could not find an email address for you";
          }
        }
*/
      }
    }
  }

  return $messages;
}

/**
 * UTILITY: Award a badge to a player
 */
function summergame_player_award_badge($pid, $bid) {
  $db = \Drupal::database();
  $awarded = 0;

  // Check if player already has the badge
  $existing = $db->select('sg_players_badges')
    ->condition('pid', $pid)
    ->condition('bid', $bid)
    ->countQuery()
    ->execute()
    ->fetchField();

  if (!$existing) {
    $db->insert('sg_players_badges')->fields([
      'pid' => $pid,
      'bid' => $bid,
      'timestamp' => time(),
    ])->execute();
    $awarded = 1;
  }

  return $awarded;
}

/**
 * UTILITY: Update Badges for All Players within a given game term. Use when
 * creating new badges that should be awarded to existing player scores, such as
 * Master badges at the end of the game season.
 */
function summergame_check_all_player_badges($game_term = '') {
  $p_count = 0;
  $db = \Drupal::database();

  if ($game_term == 'HallOfFame') {
    // HallOfFame badges span multiple game terms. Check ALL player IDs.
    $res = $db->query("SELECT pid FROM sg_players WHERE 1 ORDER BY pid");
  }
  else {
    $res = $db->query("SELECT DISTINCT pid FROM sg_ledger WHERE game_term = :gt ORDER BY pid", [':gt' => $game_term]);
  }

  while ($p = $res->fetchObject()) {
    summergame_player_check_badges($p->pid, $game_term);
    if (++$p_count % 100 == 0) {
      echo date("Y-m-d H:i:s") . " Processed $p_count Players..." . PHP_EOL;
    }
  }
}

function summergame_check_completion_bonus($pid) {
  $db = \Drupal::database();
  $summergame_settings = \Drupal::config('summergame.settings');
  $current_game_term = $summergame_settings->get('summergame_current_game_term');
  $current_year_ts = strtotime(date('Y-01-01'));

  if ($player = summergame_player_load($pid)) {
    if (FALSE && ($player['agegroup'] == 'youth' || $player['agegroup'] == 'teen')) { // No BookPrizeTokens
      $row = $db->query("SELECT * FROM sg_ledger WHERE pid = :pid AND game_term = :game_term AND type = 'Completion Bonus' AND timestamp > :year_ts",
                        [':pid' => $pid, ':game_term' => 'BookPrizeToken', ':year_ts' => $current_year_ts])->fetchObject();
    }
    else {
      $row = $db->query("SELECT * FROM sg_ledger WHERE pid = :pid AND game_term = :game_term AND type = 'Completion Bonus'",
                        [':pid' => $pid, ':game_term' => $current_game_term])->fetchObject();
    }

    if (!isset($row->lid)) {
      // Award Bonus
      if (FALSE && ($player['agegroup'] == 'youth' || $player['agegroup'] == 'teen')) { // No BookPrizeTokens
        // Award Book Token
        summergame_player_points($pid, 1, 'Completion Bonus', 'Book Token Bonus for completing the Classic Reading Game', 'delete:no', 'BookPrizeToken');
        \Drupal::messenger()->addMessage('Received a Book Token Bonus for completing the Classic Reading Game');
      }
      else {
        // Default to point bonus
        summergame_player_points($pid, 1000, 'Completion Bonus', 'Point Bonus for completing the Classic Reading Game', 'delete:no');
        \Drupal::messenger()->addMessage('Received a Point Bonus for completing the Classic Reading Game');
      }
    }
  }
}

function summergame_check_all_completion_bonuses() {
  $db = \Drupal::database();
  $summergame_settings = \Drupal::config('summergame.settings');
  $current_game_term = $summergame_settings->get('summergame_current_game_term');
  $completion_gamecode = $summergame_settings->get('summergame_completion_gamecode');

  // Find all players who have redeemed Completion code
  $pids = [];
  $res = $db->query("SELECT * FROM sg_ledger WHERE game_term = :game_term AND metadata = :data",
                    [':game_term' => $current_game_term, ':data' => 'gamecode:' . $completion_gamecode]);
  while ($row = $res->fetchObject()) {
    $pids[] = $row->pid;
  }

  // Check if each has received the completion bonus
  foreach ($pids as $pid) {
    summergame_check_completion_bonus($pid);
  }
}

/**
 * UTILITY: Merge Two Player Records
 * Additional info from player 2 is added to player 1
 */
function summergame_players_merge($pid1, $pid2) {
  $db = \Drupal::database();
  $p1 = summergame_player_load(['pid' => $pid1]);
  $p2 = summergame_player_load(['pid' => $pid2]);

  // Remove player 2 as active player id if set on drupal user account
  if ($p2['uid']) {
    $userData = \Drupal::service('user.data');
    if ($p2['pid'] == $userData->get('summergame', $p2['uid'], 'sg_active_pid')) {
      $userData->delete('summergame', $p2['uid'], 'sg_active_pid');
    }
  }

  // Don't check or try to update Badge IDs
  unset($p1['bids'], $p2['bids']);

  // Update Player Data Fields
  foreach ($p2 as $field => $data) {
    if (empty($p1[$field])) {
      $p1[$field] = $data;
    }
  }
  summergame_player_save($p1);

  // Check for duplicate Game Codes and remove from old player
  $duplicate_codes = [];
  $res = $db->query("SELECT * FROM sg_ledger WHERE pid = :pid AND metadata LIKE '%gamecode:%'", [':pid' => $pid1]);
  while ($row = $res->fetchAssoc()) {
    if (preg_match('/gamecode:([\w]+)/', $row['metadata'], $matches)) {
      $duplicate_codes[] = [$matches[1], $row['game_term']];
    }
  }
  if (count($duplicate_codes)) {
    foreach ($duplicate_codes as $duplicate) {
      $metadata = '%gamecode:' . $duplicate[0] . '%';
      $db->query("DELETE FROM sg_ledger WHERE pid = :pid AND metadata LIKE :metadata AND game_term = :game_term",
                 [':pid' => $pid2, ':metadata' => $metadata, ':game_term' => $duplicate[1]]);
    }
  }

  // Remove duplicate Signup and Completed bonuses
  $res = $db->query("SELECT COUNT(lid) AS count FROM sg_ledger WHERE type = 'Signup' AND (pid = :pid1 OR pid = :pid2)", [':pid1' => $pid1, ':pid2' => $pid2]);
  $ledger = $res->fetchObject();
  if ($ledger->count > 1) {
    $db->query("DELETE FROM sg_ledger WHERE pid = :pid AND type = 'Signup'", [':pid' => $pid2]);
  }
  $res = $db->query("SELECT COUNT(lid) AS count FROM sg_ledger WHERE type = 'Completed' AND (pid = :pid1 OR pid = :pid2)", [':pid1' => $pid1, ':pid2' => $pid2]);
  $ledger = $res->fetchObject();
  if ($ledger->count > 1) {
    $db->query("DELETE FROM sg_ledger WHERE pid = :pid AND type = 'Completed'", [':pid' => $pid2]);
  }

  // Remove OLD duplicate badges and bonuses
  $badges = [];
  $res = $db->query("SELECT * FROM sg_badges, sg_players_badges WHERE sg_badges.bid = sg_players_badges.bid AND sg_players_badges.pid = :pid", [':pid' => $pid1]);
  while ($badge = $res->fetchObject()) {
    $badges[] = $badge;
  }
  foreach ($badges as $badge) {
    $db->query("DELETE FROM sg_players_badges WHERE pid = :pid and bid = :bid", [':pid' => $pid2, ':bid' => $badge->bid]);
    $badge_description = "Earned the $badge->title Badge";
    $db->query("DELETE FROM sg_ledger WHERE pid = :pid AND type = 'Badge Bonus' AND description = :description", [':pid' => $pid2, ':description' => $badge_description]);
  }

  // Remove NEW duplicate badges and bonuses
  $badges = [];
  $res = $db->query("SELECT * FROM node_field_data, sg_players_badges WHERE node_field_data.type = 'sg_badge' " .
                    "AND node_field_data.nid = sg_players_badges.bid AND sg_players_badges.pid = :pid", [':pid' => $pid1]);
  while ($badge = $res->fetchObject()) {
    $badges[] = $badge;
  }
  foreach ($badges as $badge) {
    $db->query("DELETE FROM sg_players_badges WHERE pid = :pid and bid = :bid", [':pid' => $pid2, ':bid' => $badge->bid]);
    $badge_description = "Earned the $badge->title Badge";
    $db->query("DELETE FROM sg_ledger WHERE pid = :pid AND type = 'Badge Bonus' AND description = :description", [':pid' => $pid2, ':description' => $badge_description]);
  }

  // FRIEND CODE CLEANUP ///////////////////////////////////////////////////////
  // Remove friend codes if new and old entered each other's codes
  $db->query("DELETE FROM sg_ledger WHERE pid = :pid and metadata LIKE :metadata", [':pid' => $pid1, ':metadata' => 'fc_player:' . $pid2]);
  $db->query("DELETE FROM sg_ledger WHERE pid = :pid AND metadata LIKE :metadata", [':pid' => $pid1, ':metadata' => 'fc_follower:' . $pid2]);
  $db->query("DELETE FROM sg_ledger WHERE pid = :pid AND metadata LIKE :metadata", [':pid' => $pid1, ':metadata' => 'fc_friend:' . $pid2]);
  $db->query("DELETE FROM sg_ledger WHERE pid = :pid and metadata LIKE :metadata", [':pid' => $pid2, ':metadata' => 'fc_player:' . $pid1]);
  $db->query("DELETE FROM sg_ledger WHERE pid = :pid AND metadata LIKE :metadata", [':pid' => $pid2, ':metadata' => 'fc_follower:' . $pid1]);
  $db->query("DELETE FROM sg_ledger WHERE pid = :pid AND metadata LIKE :metadata", [':pid' => $pid2, ':metadata' => 'fc_friend:' . $pid1]);

  // Remove duplicate Friend Codes from old player
  $duplicate_fcs = [];
  $res = $db->query("SELECT * FROM sg_ledger WHERE pid = :pid AND metadata LIKE 'fc_player:%'", [':pid' => $pid1]);
  while ($row = $res->fetchAssoc()) {
    if (preg_match('/fc_player:([\d]+)/', $row['metadata'], $matches)) {
      $duplicate_fcs[] = $matches[1];
    }
  }
  if (count($duplicate_fcs)) {
    foreach ($duplicate_fcs as $duplicate) {
      $db->query("DELETE FROM sg_ledger WHERE pid = :pid AND metadata LIKE :metadata", [':pid' => $pid2, ':metadata' => 'fc_player:' . $duplicate]);
    }
  }

  // Remove duplicate Friend Bonuses from old player
  $duplicate_fbs = [];
  $res = $db->query("SELECT * FROM sg_ledger WHERE pid = :pid AND metadata LIKE 'fc_friend:%'", [':pid' => $pid1]);
  while ($row = $res->fetchAssoc()) {
    if (preg_match('/fc_friend:([\d]+)/', $row['metadata'], $matches)) {
      $duplicate_fbs[] = $matches[1];
    }
  }
  if (count($duplicate_fbs)) {
    foreach ($duplicate_fbs as $duplicate) {
      $db->query("DELETE FROM sg_ledger WHERE pid = :pid AND metadata LIKE :metadata", [':pid' => $pid2, ':metadata' => 'fc_friend:' . $duplicate]);
    }
  }

  // Delete old player Friend Codes from any player who also entered new player Friend Code
  $res = $db->query("SELECT * FROM sg_ledger WHERE metadata LIKE :metadata", [':metadata' => 'fc_player:' . $pid1]);
  while ($row = $res->fetchObject()) {
    $db->query('DELETE FROM sg_ledger WHERE pid = :pid AND metadata LIKE :metadata', [':pid' => $row->pid, ':metadata' => 'fc_player:' . $pid2]);
  }

  // Delete old player Friend Bonuses from any player who also has Friend Bonus from new player
  $res = $db->query("SELECT * FROM sg_ledger WHERE metadata LIKE :metadata", [':metadata' => 'fc_friend:' . $pid1]);
  while ($row = $res->fetchObject()) {
    $db->query('DELETE FROM sg_ledger WHERE pid = :pid AND metadata LIKE :metadata', [':pid' => $row->pid, ':metadata' => 'fc_friend:' . $pid2]);
  }

  // Update Friend Codes from old player to point to new player
  $db->query('UPDATE sg_ledger SET metadata = :metadata1 WHERE metadata = :metadata2', [':metadata1' => 'fc_player:' . $pid1, ':metadata2' => 'fc_player:' . $pid2]);

  // Award new Friend Bonuses to new player and any player who are now reciprocal friends but do not have bonus
  $following_pids = [];
  $res = $db->query("SELECT * FROM sg_ledger WHERE pid = :pid AND metadata LIKE 'fc_player:%'", [':pid' => $pid1]);
  while ($row = $res->fetchAssoc()) {
    if (preg_match('/fc_player:([\d]+)/', $row['metadata'], $matches)) {
      $following_pids[] = $matches[1];
    }
  }
  if (count($following_pids)) {
    foreach ($following_pids as $following_pid) {
      // Check if they are a friend
      $row = $db->query("SELECT * FROM sg_ledger WHERE pid = :pid AND metadata LIKE :metadata", [':pid' => $following_pid, ':metadata' =>' fc_player:' . $pid1])->fetchObject();
      if ($row->lid) {
        // Friends! Check for bonuses
        $pf_row = $db->query("SELECT * FROM sg_ledger WHERE pid = :pid AND metadata LIKE :metadata", [':pid' => $pid1, ':metadata' => 'fc_friend:'. $following_pid])->fetchObject();
        if (!$pf_row->lid) {
          // give player friend bonus
          summergame_player_points($pid1, 50, 'Friend Code', 'You and Player #' . $following_pid . ' are now friends!', 'fc_friend:' . $following_pid);
        }
        $of_row = $db->query("SELECT * FROM sg_ledger WHERE pid = :pid AND metadata LIKE :metadata", [':pid' => $following_pid, ':metadata' => 'fc_friend:' . $pid1])->fetchObject();
        if (!$of_row->lid) {
          // give other friend bonus
          summergame_player_points($following_pid, 50, 'Friend Code', 'You and Player #' . $pid1 . ' are now friends!', 'fc_friend:' . $pid1);
        }
      }
    }
  }

  // Update remaing player2 data to point at player1 and delete player 2
  $db->query("UPDATE sg_ledger SET pid = :pid1 WHERE pid = :pid2", [':pid1' => $pid1, ':pid2' => $pid2]);
  $db->query("UPDATE sg_players_badges SET pid = :pid1 WHERE pid = :pid2", [':pid1' => $pid1, ':pid2' => $pid2]);
  $db->query("DELETE FROM sg_players WHERE pid = :pid", [':pid' => $pid2]);
}

/**
 * UTILITY: Move a player to a different player #
 *
 * Sometimes needed to make sure the correct player is the primary player when multiple players
 * are attached to a single website account.
 */
function summergame_move_player_id($old_pid, $new_pid) {
  $db = \Drupal::database();
  // Update ledger
  $db->query("UPDATE sg_ledger SET pid = :new_pid WHERE pid = :old_pid", [':new_pid' => $new_pid, ':old_pid' => $old_pid]);
  // Update player table
  $db->query("UPDATE sg_players SET pid = :new_pid WHERE pid = :old_pid", [':new_pid' => $new_pid, ':old_pid' => $old_pid]);
  // Update players badges
  $db->query("UPDATE sg_players_badges SET pid = :new_pid WHERE pid = :old_pid", [':new_pid' => $new_pid, ':old_pid' => $old_pid]);
  // Update players teams
  $db->query("UPDATE sg_players_teams SET pid = :new_pid WHERE pid = :old_pid", [':new_pid' => $new_pid, ':old_pid' => $old_pid]);
}

/**
 * UTILITY: Send an email message with an attachment
 */
function summergame_email_attachment($to, $subject, $message, $from, $fileatt, $replyto = '') {
  // handles mime type for better receiving
  $ext = strrchr($fileatt , '.');
  switch($ext) {
    case '.doc':
      $ftype = 'application/msword';
      break;
    case '.jpg':
      $ftype = 'image/jpeg';
      break;
    case '.gif':
      $ftype = 'image/gif';
      break;
    case '.zip':
      $ftype = 'application/zip';
      break;
    case '.pdf':
      $ftype = 'application/pdf';
      break;
    case '.swf':
      $ftype = 'application/x-shockwave-flash';
      break;
    case '.mp3':
      $ftype = 'audio/mpeg';
      break;
    case '.mp4':
      $ftype = 'video/mp4v-es';
      break;
    case '.mov':
      $ftype = 'video/quicktime';
      break;
    default:
      $ftype = 'application/octet-stream';
  }

  // read file into $data var
  $file = fopen($fileatt, 'rb');
  $data = fread($file, filesize($fileatt));
  fclose($file);

  // split the file into chunks for attaching
  $content = chunk_split(base64_encode($data));
  $uid = md5(uniqid(time()));

  // build the headers for attachment and html
  $EOL = PHP_EOL;
  $headers = "From: $from$EOL";
  if ($replyto) {
    $headers .= "Reply-To: $replyto$EOL";
  }
  $headers .= "MIME-Version: 1.0$EOL";
  $headers .= "Content-Type: multipart/mixed; boundary=\"$uid\"$EOL$EOL";
  $headers .= "This is a multi-part message in MIME format.$EOL";
  $headers .= "--$uid$EOL";
  $headers .= "Content-type:text/html; charset=iso-8859-1$EOL";
  $headers .= "Content-Transfer-Encoding: 7bit$EOL$EOL";
  $headers .= str_replace($EOL, '<br />', $message) . "$EOL$EOL";
  $headers .= "--$uid$EOL";
  $headers .= "Content-Type: $ftype; name=\"" . basename($fileatt) . "\"$EOL";
  $headers .= "Content-Transfer-Encoding: base64$EOL";
  $headers .= "Content-Disposition: attachment; filename=\"" . basename($fileatt) . "\"$EOL$EOL";
  $headers .= "$content$EOL$EOL";
  $headers .= "--$uid--";

  // send mail
  return mail($to, $subject, $message, $headers);
}

function summergame_tag_bib($bib_id, $game_code, $game_term = '') {
  // Set a new connector to the CouchDB server
  $summergame_settings = \Drupal::config('summergame.settings');
  $dsn = $summergame_settings->get('summergame_couch_dsn');
  $db = $summergame_settings->get('summergame_couch_db');
  $client = new CouchClient($dsn, $db);

  try {
    $doc = $client->getDoc($bib_id);
  } catch (Exception $e) {
    return ['error' => "Couch Document not found: " . $e->getMessage()];
  }

  if (empty($game_term)) {
    $game_term = $summergame_settings->get('summergame_current_game_term');
  }

  // check if field is set. if is an array, apply additional code
  if(!isset($doc->gamecodes)) {
    $doc->gamecodes = new \stdClass;
  }

  if (!isset($doc->gamecodes->{$game_term}) || (is_array($doc->gamecodes->{$game_term}) && !in_array($game_code, $doc->gamecodes->{$game_term}))) {

    $doc->gamecodes->{$game_term}[] = $game_code;
  }

  if(!isset($doc->flags)) {
    $doc->flags = new \stdClass;
  }
  $doc->flags->protected = 1;

  // update bib record
  try {
    $client->storeDoc($doc);
  } catch (Exception $e) {
    return ['error' => "Couch Document storage failed: " . $e->getMessage()];
  }

  return ['success' => $doc];
}
